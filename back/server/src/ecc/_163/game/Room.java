package ecc._163.game;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;

/**
 * represents a room in which 163 may be played
 */
public class Room {

	final public static int ONE_SIXTY_THREE = 163;
	final public static int NUM_CARDS = 6;
	
	final public static int ROUND_DURATION = 60;
	
	/**
	 * cards being used in the current round of 163
	 */
	final private int[] m_cards = new int[ 6 ];
	
	/**
	 * the countdown timer for this room
	 */
	private CountdownTimer m_timer;
	
	/**
	 * creates a room in which rounds of 163 may be played
	 */
	public Room() {
		
	}
	
	/**
	 * starts a new round of 163
	 */
	public void startRound() throws IOException {
		
		//generate a problem
		int randomSeed = ( int )( Math.random() * 100000 );
		Process runGenerator = Runtime.getRuntime().exec( "./a.out " + ONE_SIXTY_THREE + " " + NUM_CARDS + " " + randomSeed );
		BufferedReader cardReader = new BufferedReader( new InputStreamReader( runGenerator.getInputStream() ) );
		
		//read in the cards generated by the generator
		for ( int i = 0 ; i < this.m_cards.length ; i++ ) {
			this.m_cards [ i ] = Integer.parseInt( cardReader.readLine() );
		}
		//close inputs
		cardReader.close();
		
		//send the problem to all the players
		//TODO
		
		//start the timer
		this.m_timer = new CountdownTimer( ROUND_DURATION );
		this.m_timer.start();
		
		//DEBUG
		for ( int i = 0 ; i < this.m_cards.length ; i++ ) {
			System.out.print( this.m_cards[ i ] + " ");
		}
		System.out.println();
	}
	
	/**
	 * ends a round of 163
	 */
	public void endRound() {
		
		//notify users that round is over, no more solutions accepted
		//TODO
		System.out.println( "round over" );
		this.m_timer.cancel();
		System.exit( 0 );
	}
	
	/**
	 * checks a solution to 163
	 */
	public void checkSolution( String solution ) {
		try {
			
			//determine the cards that must be used
			String cards = "";
			for ( int i = 0 ; i < this.m_cards.length ; i++ ) {
				cards += this.m_cards[ i ] + " ";
			}
			cards = cards.trim();
			
			//check the user's solution
			Process runChecker = Runtime.getRuntime().exec( "java -jar checker.jar " + ONE_SIXTY_THREE + " " + NUM_CARDS + " " + cards + " " + solution );
			runChecker.waitFor();
			
			//notify user of result
			if ( runChecker.exitValue() == 0 ) {
				
				//notify all users of valid solution
				//TODO
				System.out.println( "ok" );
				
				endRound();
			} else {
				
				//notify user of failed solution
				//TODO
				System.out.println( "failed" );
			}
		} catch ( IOException e ) {
			//TODO
		} catch ( InterruptedException e ) {
			//TODO
		}
	}
	
	/**
	 * Timer that counts down to 0 by the second
	 */
	public class CountdownTimer extends Timer {
		
		/**
		 * seconds left before the timer times out
		 */
		protected int m_seconds;
		
		/**
		 * creates a timer that ticks off a specified number of seconds
		 * and performs an action upon timing out
		 * 
		 * @param seconds			number of seconds for the timer to count down
		 */
		public CountdownTimer( int seconds ) {
			super();
			this.m_seconds = seconds;
		}
		
		/**
		 * starts this timer
		 */
		public void start() {
			TimerTask task = new TimerTask() {
				
				@Override
				public void run() {
					
					//if there are no seconds left, then this timer
					//has timed out
					if ( CountdownTimer.this.m_seconds <= 0 ) {
						CountdownTimer.this.handleTimeout();
						CountdownTimer.this.cancel();
					}
					CountdownTimer.this.m_seconds --;
				}
			};
			super.schedule( task , 0 , 1000 );
		}
		
		/**
		 * @return			the number of seconds left before this timer times out
		 */
		public int getSecondsLeft() {
			return this.m_seconds;
		}
		
		/**
		 * 
		 */
		public void handleTimeout() {
			endRound();
		}
	}
	
	
	//DEBUG
	final public static void main( String[] args ) throws IOException {
		Room r = new Room();
		r.startRound();
		Scanner s = new Scanner( System.in );
		while ( true ) {
			r.checkSolution( s.nextLine() );
		}
	}//*/
}
